{"version":3,"sources":["components/Navbar.js","components/Alart.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","react_router_dom","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggle","htmlFor","Alart","alart","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","border","rows","value","onChange","event","target","newText","toLocaleUpperCase","showAlart","toLocaleLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","About","btntext","setbtntext","_useState3","_useState4","myStyle","setmyStyle","aria-labelledby","data-bs-parent","defaultProps","App","Mode","setMode","setalart","message","setTimeout","body","setInterval","react_router","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1bc12426.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg   bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand text-light\" to=\"/\">\r\n          <b>{props.title}</b>\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link\r\n                className=\"nav-link active text-light\"\r\n                aria-current=\"page\"\r\n                to=\"/\"\r\n              >\r\n                <b>Home</b>\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link text-light\" to=\"/about\">\r\n                <b>{props.aboutText}</b>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            ></input>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggle}\r\n            ></input>\r\n            <label\r\n              className=\"form-check-label text-light\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              <b>Dark Mode</b>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title here\",\r\n  aboutText: \"Set About here\",\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function Alart(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alart && (\r\n      <div\r\n        className={`alert alert-${props.alart.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alart.type)}</strong>: {props.alart.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  let handleuppercaseClick = () => {\r\n    // setText(\"you have clicked on the convert buttton\");\r\n    let newText = text.toLocaleUpperCase();\r\n    setText(newText);\r\n    props.showAlart(\"Converted to UpperCase\", \"success\");\r\n  };\r\n\r\n  let handleLowerCaseClick = () => {\r\n    // setText(\"you have clicked on the convert buttton\");\r\n    let newText = text.toLocaleLowerCase();\r\n    setText(newText);\r\n    props.showAlart(\"Converted to LowerCase\", \"success\");\r\n  };\r\n\r\n  let handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  let clean = () => {\r\n    setText(\" \");\r\n  };\r\n\r\n  let handleCopy = () => {\r\n    let text = document.getElementById(\"mybox\");\r\n    text.select();\r\n    // text.setSelectionRange(0, 9999); //for mobile user 😎\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlart(\"Text Copied 😎\", \"success\");\r\n  };\r\n\r\n  let removeSpace = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlart(\"Extra Spaces Has Been Removed 😎😎\", \"success\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter Text Here\"); // the state\r\n  // setText(\"Text Here\"); //to change text value,the correct way 😎\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"mybox\" className=\"form-label\">\r\n            Enter Below\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#121212\" : \"white\",\r\n              border:\r\n                props.mode === \"dark\" ? \"2px solid white\" : \"2px solid black\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            id=\"mybox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n          <div>\r\n            <button\r\n              className=\"btn btn-primary my-2\"\r\n              onClick={handleuppercaseClick}\r\n            >\r\n              Convert to Uppercase\r\n            </button>\r\n            <button\r\n              className=\"btn btn-primary my-2 mx-2\"\r\n              onClick={handleLowerCaseClick}\r\n            >\r\n              Convert to Lowercase\r\n            </button>\r\n            <button className=\"btn btn-dark my-2 mx-2\" onClick={clean}>\r\n              Clean Text\r\n            </button>\r\n\r\n            <button className=\"btn btn-dark my-2 mx-2\" onClick={handleCopy}>\r\n              Copy Text\r\n            </button>\r\n            <button className=\"btn btn-dark my-2 mx-2\" onClick={removeSpace}>\r\n              Remove Extra Spaces\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className={`container my-3 text-${\r\n          props.mode === \"dark\" ? \"white\" : \"black\"\r\n        }`}\r\n      >\r\n        <h2>Enter text Summery</h2>\r\n        <p>\r\n          {text.split(\" \").length} words, {text.length} characters\r\n        </p>\r\n        <p>{0.008 * 60 * text.split(\" \").length} second to read</p>\r\n        <h3>Preview</h3>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in to the text box to Preview\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n  const [btntext, setbtntext] = useState(\"Enable Dark Mode\");\r\n  let toggle = () => {\r\n    if (myStyle.color === \"black\") {\r\n      setmyStyle({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n      });\r\n      setbtntext(\"Enable Light Mode\");\r\n    } else {\r\n      setmyStyle({\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n      });\r\n      setbtntext(\"Enable Dark Mode\");\r\n    }\r\n  };\r\n  const [myStyle, setmyStyle] = useState({\r\n    color: \"black\",\r\n    backgroundColor: \"white\",\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h1>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n              style={myStyle}\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classes that we use to style each element. These classes control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button onClick={toggle} className=\"btn btn-primary my-2\">\r\n        {btntext}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\n\nimport Navbar from \"./components/Navbar\";\nimport Alart from \"./components/Alart\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState(\"primary\");\n  const [alart, setalart] = useState(null);\n  const showAlart = (message, type) => {\n    setalart({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setalart(null);\n    }, 4000);\n  };\n  let toggleMode = () => {\n    if (Mode === \"primary\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#121212\";\n      showAlart(\"Dark Mode Has Been Enabled\", \"success\");\n      document.title = \"TextUtils-Dark Mode\";\n      setInterval(() => {\n        document.title = \"TextUtils-is Awsome\";\n      }, 2000);\n      setInterval(() => {\n        document.title = \"TextUtils-Install Now\";\n      }, 1500);\n    } else {\n      setMode(\"primary\");\n      document.body.style.backgroundColor = \"white\";\n      showAlart(\"Light Mode Has Been Enabled\", \"success\");\n      document.title = \"TextUtils-Home\";\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About TextUtils\"\n          mode={Mode}\n          toggle={toggleMode}\n        />\n        <Alart alart={alart} />\n\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n\n            <Route exact path=\"/\">\n              <TextForm\n                heading=\"Enter the text to analyze\"\n                mode={Mode}\n                showAlart={showAlart}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}